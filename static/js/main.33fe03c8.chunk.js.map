{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoTask","task","completeTask","className","taskName","type","onClick","App","useState","setTask","deadline","setDeadline","todoList","setTodoList","taskNameToDelete","filter","name","value","placeholder","onChange","event","target","newTask","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAqBeA,EAbE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,aACrB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,UAAf,SACI,+BAAOF,EAAKG,aAGhB,uBAAOD,UAAU,iBAAiBE,KAAK,aACvC,wBAAQC,QAAS,WAAOJ,EAAaD,EAAKG,WAA1C,mB,QCyDGG,G,MAlEA,WAAO,IAAD,EACIC,mBAAiB,IADrB,mBACZP,EADY,KACPQ,EADO,OAEYD,mBAAiB,GAF7B,mBAEZE,EAFY,KAEHC,EAFG,OAGyBH,oBAAkB,GAH3C,gCAIYA,mBAAkB,KAJ9B,mBAIZI,EAJY,KAIHC,EAJG,KAuBbX,EAAe,SAACY,GACpBD,EAAYD,EAASG,QAAO,SAACd,GAC3B,OAAOA,EAAKG,UAAYU,OAK5B,OACE,sBAAKX,UAAU,MAAf,UACC,qBAAKA,UAAU,QAAf,oBACA,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,cAAf,SACA,uBACAa,KAAK,OACLX,KAAK,OACLY,MAAOhB,EACPiB,YAAY,uBACZC,SAlCgB,SAACC,GACK,SAAtBA,EAAMC,OAAOL,MACdP,EAAQW,EAAMC,OAAOJ,OAKvBR,EAAQW,EAAMC,OAAOJ,YAsClB,wBAAQX,QAnCG,WACd,IAAMgB,EAAU,CAAClB,SAAWH,EAAMS,SAASA,GAC3CG,EAAY,GAAD,mBAAKD,GAAL,CAAeU,KAC1Bb,EAAQ,IACRE,EAAY,IA+BT,yBAEF,sBAAMR,UAAU,aAAhB,SACK,cAAC,IAAD,MAGL,qBAAKA,UAAU,WAAf,SACGS,EAASW,KAAI,SAACtB,EAAcuB,GAC1B,OAAO,cAAC,EAAD,CAAoBvB,KAAMA,EAAMC,aAAcA,GAA/BsB,aCpDjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33fe03c8.chunk.js","sourcesContent":["import React from 'react'\r\nimport {ITask} from '../Interfaces'\r\n\r\ninterface Props{\r\n    task : ITask;\r\n    completeTask(taskNameToDelete:string): void;\r\n}\r\n\r\nconst ToDoTask = ({task, completeTask}:Props) => {\r\n    return (\r\n        <div className='task'>\r\n            <div className=\"content\">\r\n                <span>{task.taskName}</span>\r\n                {/* <span>{task.deadline}</span> */}\r\n            </div>\r\n            <input className=\"completeStatus\" type=\"checkbox\"/>\r\n            <button onClick={() => {completeTask(task.taskName)}}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoTask;","import React,{FC, ChangeEvent, useState} from 'react';\nimport './App.css';\nimport ToDoTask from './Components/TodoTask';\nimport {ITask} from './Interfaces';\nimport { DatePicker,PageHeader } from 'antd';\nimport 'antd/dist/antd.css';\n\nconst App:FC = () => {\n  const [task,setTask] = useState<string>(\"\");\n  const [deadline,setDeadline] = useState<number>(0);\n  const [completeStatus, setCompleteStatus] = useState<boolean>(false);\n  const [todoList,setTodoList] = useState<ITask[]>([]);\n\n  const handleChange = (event : ChangeEvent<HTMLInputElement>) : void => {\n    if(event.target.name === \"task\"){\n      setTask(event.target.value);\n    }\n    // else{\n    //   setDeadline(Number(event.target.value));\n    // }\n    setTask(event.target.value);\n  };\n\n  const addTask = () : void => {\n    const newTask = {taskName : task, deadline:deadline};\n    setTodoList([...todoList, newTask]);\n    setTask(\"\");\n    setDeadline(0);\n  }\n\n  const completeTask = (taskNameToDelete : string) : void => {\n    setTodoList(todoList.filter((task) => {\n      return task.taskName != taskNameToDelete\n    }))\n  }\n\n\n  return (\n    <div className=\"App\">\n     <div className='title'>ToDos!</div>\n     <div className=\"header\">\n       <div className=\"inputFields\">\n       <input \n       name=\"task\"\n       type=\"text\" \n       value={task}\n       placeholder=\"Enter your task here\" \n       onChange={handleChange} \n      />\n\n       {/* <input \n       name=\"deadline\"\n       type=\"number\" \n       value={deadline}\n       placeholder=\"Deadline in days\" \n       onChange={handleChange} \n       /> */}\n       </div>\n       <button onClick={addTask}>Add Task</button>\n     </div>\n     <span className=\"datePicker\">\n         {<DatePicker />}\n        </span>\n\n     <div className=\"todoList\">\n       {todoList.map((task : ITask, key : number) => {\n          return <ToDoTask key={key} task={task} completeTask={completeTask}/>\n       })}\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}